#!/usr/bin/env ruby
# frozen_string_literal: true

# Tayo 디버깅 스크립트

require_relative "../lib/tayo"

puts "=== Tayo 환경 디버깅 정보 ==="
puts "Ruby 버전: #{RUBY_VERSION}"
puts "Tayo 버전: #{Tayo::VERSION}"
puts "실행 위치: #{Dir.pwd}"
puts "Bundler 사용: #{defined?(Bundler) ? 'Yes' : 'No'}"

# Gem 정보
begin
  spec = Gem::Specification.find_by_name('tayo')
  puts "Gem 위치: #{spec.gem_dir}"
  puts "Gem 버전: #{spec.version}"
rescue Gem::LoadError
  puts "Gem이 시스템에 설치되지 않음 (개발 환경?)"
end

# Dockerfile 확인
if File.exist?("Dockerfile")
  puts "\nDockerfile 분석:"
  content = File.read("Dockerfile")
  bootsnap_lines = content.lines.each_with_index.select { |line, _| line.include?("bootsnap") }
  
  if bootsnap_lines.empty?
    puts "  bootsnap 관련 라인 없음"
  else
    puts "  bootsnap 관련 라인 발견:"
    bootsnap_lines.each do |line, index|
      puts "    라인 #{index + 1}: #{line.strip}"
    end
  end
else
  puts "\nDockerfile 없음"
end

# 메서드 확인
init = Tayo::Commands::Init.new
puts "\n메서드 확인:"
puts "  fix_dockerfile_bootsnap_issue 메서드 존재: #{init.respond_to?(:fix_dockerfile_bootsnap_issue, true)}"

if init.respond_to?(:fix_dockerfile_bootsnap_issue, true)
  method = init.method(:fix_dockerfile_bootsnap_issue)
  puts "  메서드 정의 위치: #{method.source_location}"
end

puts "\n=== 디버깅 모드로 실행하려면 ==="
puts "TAYO_DEBUG=true tayo init"